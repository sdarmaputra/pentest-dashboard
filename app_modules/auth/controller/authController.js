var express = require('express');
var path = require('path');
var bodyParser = require('body-parser');
var jwt = require('jsonwebtoken');
var crypto = require('crypto');
var router = express.Router();
var user = loadModel('user');

var view_dirname = 'auth/views';
var data = [];
data.title = 'Authentication';
data.site_name = config.site_name;
data.layout = '../base_views/layouts/home_layout';

router.use(bodyParser.urlencoded({ extended: true }));

router.post('/', function(req, res, next) {
	user.findOne({where: {username: req.body.username}}).then(function(currUser){
		var result = {};
		if (currUser != null) {
			var hashedPassword = crypto.createHash('sha256').update(req.body.password).digest('hex');
			if (currUser.password == hashedPassword) {
				var loginDate = Date();
				var activeToken = crypto.createHash('sha256').update(currUser.username + loginDate).digest('hex');
				var token = jwt.sign({
					username: req.body.username, 
					userId: currUser.id,
					activeToken: activeToken,
					loginAt: loginDate}, 
				config.secret);
				
				result = {
					status: 'success',
					message: 'You have succesfully logged in.',
					loginAt: loginDate,
					token: token
				}

				var dbActiveToken = (currUser.activeToken == null) ? "" : currUser.activeToken;

				user.update({'activeToken': dbActiveToken + activeToken + "|"}, { where: { id: currUser.id } }).then(function() {
					res.json(result);
				});
			} else {
				result = {
					status: 'failed',
					message: 'Username and password does not match!'
				}
				res.json(result);
			}
		} else {
			result = {
				status: 'failed',
				message: 'Username not registered!'
			}
			res.json(result);
		}
	});
	
});

router.post('/logout', function(req, res, next) {	
	var newActiveToken = "";
	user.findOne({where: {id: req.identity.userId}}).then(function(currUser){
		var activeToken = currUser.activeToken.split("|");
		activeToken.forEach(function(value, index, arr){
			if (value != req.identity.activeToken) {
				newActiveToken = newActiveToken + value + "|";
			}
		});
		user.update({'activeToken': newActiveToken}, { where: { id: currUser.id } }).then(function() {
			res.json({status: 'success'});
		});
	});
	res.json({status: 'success'});
});

module.exports = router;
