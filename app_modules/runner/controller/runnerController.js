var express = require('express');
var path = require('path');
var bodyParser = require('body-parser');
var http = require('http');
var request = require('request');
var router = express.Router();
var scenario = loadModel('scenario');
var nodemailer = require('nodemailer');
var fs = require('fs');

var data = [];
data.title = 'Attack List';
data.site_name = 'Pentest Dashboard';

var appSandboxUrl = "http://10.151.36.93:8000";
var pentestAgentUrl = "http://10.151.36.92:8000";
var primaryUrl = "http://10.151.36.30:3000";
var appSandboxDeployUrl = appSandboxUrl + '/deploy'; // using appSandboxUrl
var pentestAgentGetUrl = pentestAgentUrl + '/run'; // using pentestAgentUrl
var pentestAgentScanUrl = pentestAgentUrl + '/scan'; //using pentestAgentUrl
var storeResultUrl = primaryUrl + "/result/store"; // using primaryUrl


sendMail = function(params) {
	// create reusable transporter object using the default SMTP transport 
	var transporter = nodemailer.createTransport('smtps://untakayang%40gmail.com:alamatemailke5@smtp.gmail.com');
	
	scenario.findOne({where: {id: params.scenarioId}}).then(function(currScenario){
		// setup e-mail data with unicode symbols 
		var mailOptions = {
		    from: 'untakayang@gmail.com', // sender address 
		    to: currScenario.emails, // list of receivers 
		    subject: 'Penetration Testing Result', // Subject line 
		    text: params.message, // plaintext body 
		    html: params.message // html body 
		};
		 
		// send mail with defined transport object 
		transporter.sendMail(mailOptions, function(error, info){
		    if(error){
		        return console.log(error);
		    }
		    console.log('Message sent: ' + info.response);
		});
	}); 
		
}

storeResult = function(params) {
	console.log('Storing result to database');
    var insertData = {
      scenarios_id: params.scenarioId,
      applicationName: params.applicationName,
      scannerUrl: params.scannerUrl,
      targetUrl: params.targetUrl,
      runningToken: params.runningToken,
      detail: params.scanResult
    }
    console.log("insertdata before insert")
    request.post({url:params.storeResultUrl, 
	form: insertData}, function(error, httpResponse, body){ 
		if (!error && httpResponse.statusCode == 200) {
			body = JSON.parse(body);
			if (body.status == 'success') {
				scenario.update({runningStatus: 0}, { where: { id: insertData.scenarios_id } }).then(function() {
					var res = params.routeProperties.res;

					var notification = {
						scenarioId: insertData.scenarios_id,
						status: body.status,
						message: "Penetration test for " + body.applicationName + " finished. View scan result <strong><a href='http://10.151.36.30:4000/result/" + body.runningToken + "'>here</a></strong>."
					}
					socket.emit('notification', notification);
					sendMail(notification);
					res.json({status: 'success', state: 'finished'});
					res.end();
				});
			}
		}
	});
 }

startPentest = function(params) {
	console.log('Starting penetration test activity');
    var attackData = {
    	scenario_id: params.scenarioId,
    	application_name: params.applicationName,
    	running_token: params.runningToken,
      	target_url: params.attackTargetUrl,
      	scanner_url: params.pentestAgentUrl
    }
    console.log('Start pentest using ' + attackData.scanner_url + ' to ' + attackData.target_url);
    
    request.post({url:params.pentestAgentScanUrl, 
	form: attackData}, function(error, httpResponse, body){ 
		if (!error && httpResponse.statusCode == 200) {
			body = JSON.parse(body);
			
		    var res = params.routeProperties.res;
		    var notification = {
				status: body.status,
				message: "Penetration test for " + body.applicationName + " started."
			}
			socket.emit('notification', notification);
			res.json(body);
		}
	});
}

getPentestAgent = function(params) {
	console.log('Getting penetration test agent');
	request(params.pentestAgentGetUrl, function (error, httpResponse, body) {
	  if (!error && httpResponse.statusCode == 200) {
	  	body = JSON.parse(body);
	    var pentestAgentUrl = '';
        if (body.status == 'success') {
          	pentestAgentUrl = body.address;
          	var newParams = {
          		routeProperties: params.routeProperties,
	        	scenarioId: params.scenarioId, 
	        	applicationName: params.applicationName,
	        	runningToken: params.runningToken,
	        	pentestAgentScanUrl: pentestAgentScanUrl,
	        	pentestAgentUrl: pentestAgentUrl,
	        	attackTargetUrl: params.attackTargetUrl
	        };
	        
	        setTimeout(function(){
	        	console.log('Starting penetration test')
	          	startPentest(newParams);
	        }, 5000);
        }
	  }
	});
}

startDeploy = function(params) {
	console.log('Start deploying apps');
    var data = params.currData;
    var deployData = {
      app_name: data.applicationName,
      repo_name: data.repository,
      app_port: data.simulationPort,
      custom_files: data.customFiles
    }
    
    request.post({url:params.appSandboxDeployUrl, 
	form: deployData}, function(error, httpResponse, body){ 
		if (!error && httpResponse.statusCode == 200) {
			body = JSON.parse(body);
	      	var attackTargetUrl = '';
		    if (body.status == 'success' && body.state == 'finished') {
		      attackTargetUrl = body.app_server + ":" + body.app_port;
		    }
		    var newParams = {
		    	routeProperties: params.routeProperties,
		    	scenarioId: params.scenarioId, 
		    	applicationName: body.app_name,
		    	runningToken: params.runningToken,
		    	attackTargetUrl: attackTargetUrl,
		    	pentestAgentGetUrl: pentestAgentGetUrl
		    }

		    scenario.update({simulationAddress: newParams.attackTargetUrl}, { where: { id: newParams.scenarioId } }).then(function() {
				getPentestAgent(newParams);
			});
		}
	});
}

router.use(bodyParser.json({limit: '50mb'}));
router.use(bodyParser.urlencoded({ limit: '50mb', extended: true }));
router.use(function(req, res, next) {
  res.header("Access-Control-Allow-Origin", "*");
  res.header("Access-Control-Allow-Headers", "x-requested-with");
  res.header('Access-Control-Allow-Methods', 'DELETE, POST, GET');
  next();
});

/* Run penetration test for certain scenario based on scenario ID */
router.post('/run/:id', function(req, res, next) {
	scenario.findOne({where: {id: req.params.id}}).then(function(currScenario) {
		var scanStartDate = new Date();
		var tokenString = "{id: '" + currScenario.id + "', scanStartDate: '" + scanStartDate + "'}";
		var runningToken = new Buffer(tokenString).toString('base64');

		var params = {
			routeProperties: {req: req, res: res, next: next},
			scenarioId: req.params.id, 
			runningToken: runningToken,
			currData: currScenario,
			appSandboxDeployUrl: appSandboxDeployUrl
		}
		if (currScenario.runningStatus == 0) {
			scenario.update({runningStatus: 1, runningToken: runningToken}, { where: { id: req.params.id } }).then(function() {
				startDeploy(params);	
			});
			
		} else {
			res.json({status: 'failed', state: 'already_running'});
		}
			
	});
});

router.post('/storeResult/:id', function(req, res, next){
	var newParams = {
		routeProperties: {req: req, res: res, next: next},
		scenarioId: req.params.id,
		applicationName: req.body.applicationName,
		scannerUrl: req.body.scannerUrl,
		targetUrl: req.body.targetUrl,
		runningToken: req.body.runningToken,
		scanResult: req.body.results,
		storeResultUrl: storeResultUrl	
	}
	storeResult(newParams);
})

module.exports = router;
