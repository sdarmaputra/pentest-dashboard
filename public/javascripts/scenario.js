var EditModal = React.createClass({
  getInitialState: function() {
    return {id: '', title: '', applicationName: '', repository: '', simulationAddress: '', simulationPort: ''};
  },
  initState: function() {
    this.setState({
      id: this.props.id, 
      title: this.props.title, 
      applicationName: this.props.applicationName, 
      repository: this.props.repository,
      simulationAddress: this.props.simulationAddress,
      simulationPort: this.props.simulationPort,
  	  emails: this.props.emails});
  },
  handleTitleChange: function(event) {
    this.setState({title: event.target.value, id: this.props.id});
  },
  handleApplicationNameChange: function(event) {
    this.setState({applicationName: event.target.value, id: this.props.id});
  },
  handleRepositoryChange: function(event) {
    this.setState({repository: event.target.value, id: this.props.id});
  },
  handlesimulationAddressChange: function(event) {
    this.setState({simulationAddress: event.target.value, id: this.props.id});
  },
  handleSimulationPortChange: function(event) {
    this.setState({simulationPort: event.target.value, id: this.props.id});
  },
  handleEmailsChange: function(event) {
    this.setState({emails: event.target.value, id: this.props.id});
  },
  handleFormSubmit: function() {
    this.props.updateCallback(this.state);
  },
  render: function() {
    return (
      <div className="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel">
        <div className="modal-dialog modal-sm" role="document">
          <div className="modal-content">
            <div className="modal-header">
              <button type="button" className="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
              <h4 className="modal-title" id="editModalLabel">Edit Record</h4>
            </div>
            <div className="modal-body">
              <form>
                <div className="form-group">
                  <label>Title</label>
                  <input type="text" placeholder="Title" value={this.state.title} className=" form-control editor edit-text" onChange={this.handleTitleChange}/>
                </div>
                <div className="form-group">
                  <label>Application Name</label>
                  <input type="text" placeholder="Application Name" value={this.state.applicationName} className=" form-control editor edit-text" onChange={this.handleApplicationNameChange}/>
                </div>
                <div className="form-group">
                  <label>Repository</label>
                  <input type="text" placeholder="Repository" value={this.state.repository} className=" form-control editor edit-text" onChange={this.handleRepositoryChange}/>
                </div>
                <div className="form-group">
                  <label>Simlulation URL</label>
                  <input type="text" placeholder="Simulation Address" value={this.state.simulationAddress} className=" form-control editor edit-text" onChange={this.handlesimulationAddressChange} disabled/>
                </div>
                <div className="form-group">
                  <label>Simulation Port</label>
                  <input type="text" placeholder="Simulation Port" value={this.state.simulationPort} className=" form-control editor edit-text" onChange={this.handleSimulationPortChange}/>
                </div>
                <div className="form-group">
                  <label>E-mail(s)</label>
                  <input type="text" placeholder="E-mail(s)" value={this.state.emails} className=" form-control editor edit-text" onChange={this.handleEmailsChange}/>
                </div>
              </form>
            </div>
            <div className="modal-footer">
              <button type="button" className="btn btn-default" data-dismiss="modal">Close</button>
              <button type="button" className="btn btn-info" onClick={this.handleFormSubmit.bind(this)}>Save</button>
            </div>
          </div>
        </div>
      </div>
    );
  }
});

var ButtonRun = React.createClass({
	render: function() {
		var key = this.props.runKey;
		var targetUrl = "/scenario/run/" + key;
		return (
			<a className="btn btn-success" href={targetUrl}>
				<i className="glyphicon glyphicon-play-circle"/> 
			</a>
		);
	}
});

var ButtonEdit = React.createClass({
	render: function() {
		var content = this.props.content;
		return (
			<div className="btn btn-warning" data-toggle="modal" data-target="#editModal" onClick={this.props.updateAction.bind(this, content)}>
				<i className="glyphicon glyphicon-pencil"/> 
			</div>
		);
	}
});

var ButtonDelete = React.createClass({
	render: function() {
		var key = this.props.deleteKey
		return (
			<div className="btn btn-danger" onClick={this.props.deleteAction.bind(this, key)}>
				<i className="glyphicon glyphicon-trash"/> 
			</div>
		);
	}
});

var ButtonConfig = React.createClass({
	render: function() {
		var key = this.props.elementKey;
		var targetUrl = "/scenario/configs/" + key;
		return (
			<a className="btn btn-primary" href={targetUrl}>
				<i className="glyphicon glyphicon-cog"/> 
			</a>
		);
	}
});

var ActionButtons = React.createClass({
	render: function() {
		var buttonEdit;
		var buttonDelete;
		var buttonRun;
		var buttonConfig;
		if (this.props.editButton) {
			buttonEdit = <ButtonEdit 
					updateKey={this.props.elementKey}
					updateAction={this.props.updateAction}
					content={this.props.content}
					updateCallback={this.props.updateCallback} />;
		}
		if(this.props.configButton) {
			buttonConfig = <ButtonConfig
					elementKey={this.props.elementKey} />;
		}
		if (this.props.deleteButton) {
			buttonDelete = <ButtonDelete 
					deleteKey={this.props.elementKey} 
					deleteAction={this.props.deleteAction} />;
		}
		if(this.props.runButton) {
			buttonRun = <ButtonRun
					content={this.props.content}
					runKey={this.props.elementKey} />;
		}
		return (
			<div className="btn-group btn-group-sm">
				{buttonRun}
				{buttonEdit}
				{buttonConfig}
				{buttonDelete}				
			</div>
		);
	}
});

var ScenarioList = React.createClass({
	selectRowProp: {
			mode: "checkbox"
	},
	actionButtons: function(cell, row){
		var editUrl = this.props.url + "/edit/" + row.id;
		var deleteUrl = this.props.url + "/destroy/" + row.id;
		var key = row.id;
		return (
			<ActionButtons 
				editButton={true} 
				deleteButton={true}
				runButton={true} 
				configButton={true}
				elementKey={key}
				content={row} 
				deleteAction={this.deleteScenario} 
				updateAction={this.updateScenario}
				updateCallback={this.handleScenarioUpdate}/>
		);
	},
	updateScenario: function(row) {
		this.refs.editModal.props.id = row.id;
		this.refs.editModal.props.title = row.title;
		this.refs.editModal.props.applicationName = row.applicationName;
		this.refs.editModal.props.repository = row.repository;
		this.refs.editModal.props.simulationAddress = row.simulationAddress;
		this.refs.editModal.props.simulationPort = row.simulationPort;
		this.refs.editModal.props.emails = row.emails;
		this.refs.editModal.props.updateCallback = this.handleScenarioUpdate;
		this.refs.editModal.initState();
	},
	deleteScenario: function(key) {
		$('#loadingContainer').fadeIn();
		$.ajax({
			url: this.props.url+'/destroy/'+key,
			dataType: 'json',
			type: 'DELETE',
			success: function(data) {
				var deletedData = data;
				$.ajax({
					url: this.props.url,
					dataType: 'json',
					success: function(data) {
						this.setState({data: data});
						$('#loadingContainer').fadeOut(function(){
							alert('delete record: '+deletedData.status);
						});
					}.bind(this),
					error: function(xhr, status, err) {
						console.error(this.props.url, status, err.toString());
					}.bind(this)
				});
			}.bind(this),
			error: function(xhr, status, err) {
				console.error(this.props.url+'/destroy/'+key, status, err.toString());
			}.bind(this)
		});
	},
	handleScenarioSubmit: function(row) {
		row.simulationAddress = '';
		$('#loadingContainer').fadeIn();
		$.ajax({
			url: this.props.url+'/store',
			dataType: 'json',
			type:'POST',
			data: row,
			success: function(data) {
				this.setState({data: data});
				$('#loadingContainer').fadeOut(function(){
					alert('Scenario created for: '+row.title);	
				});
			}.bind(this),
			error: function(xhr, status, err) {
				console.error(this.props.url+'/store', status, err.toString());
			}.bind(this)
		});
	},
	handleScenarioUpdate: function(row) {
		$('#loadingContainer').fadeIn();
		$.ajax({
			url: this.props.url+'/update/'+row.id,
			dataType: 'json',
			type:'POST',
			data: row,
			success: function(data) {
				var updatedData = data;
				$('#editModal').modal('hide');
				$.ajax({
					url: this.props.url,
					dataType: 'json',
					success: function(data) {
						this.setState({data: data});
						$('#loadingContainer').fadeOut(function() {
							alert('update record: '+updatedData.status);
						});
					}.bind(this),
					error: function(xhr, status, err) {
						console.error(this.props.url, status, err.toString());
					}.bind(this)
				});
			}.bind(this),
			error: function(xhr, status, err) {
				console.error(this.props.url+'/update', status, err.toString());
			}.bind(this)
		});	
	},
	handleScenarioDelete: function(rowKeys) {
		var deleteScenario = this.deleteScenario;
		rowKeys.forEach(function(key) {
			deleteScenario(key);
		});
	},
	getInitialState: function() {
		return {data: [], url: this.props.url};
	},
	componentDidMount: function() {
		$.ajax({
			url: this.props.url,
			dataType: 'json',
			success: function(data) {
				this.setState({data: data});
				$('#loadingContainer').fadeOut();
			}.bind(this),
			error: function(xhr, status, err) {
				console.error(this.props.url, status, err.toString());
			}.bind(this)
		});
	},
	render: function() {
		return (
			<div className="module-container">
				<BootstrapTable 
				data={this.state.data} 
				insertRow={true} 
				deleteRow={true} 
				selectRow={this.selectRowProp} 
				hover={true}
				search={true}
				pagination={true}
				options={{afterInsertRow: this.handleScenarioSubmit, afterDeleteRow:this.handleScenarioDelete}}>
					<TableHeaderColumn dataField='id' isKey={true} hidden={true} editable={false} autoValue={true}>ID</TableHeaderColumn>
					<TableHeaderColumn dataField='title'>Title</TableHeaderColumn>
					<TableHeaderColumn dataField='applicationName'>Application Name</TableHeaderColumn>
					<TableHeaderColumn dataField='repository'>Repository</TableHeaderColumn>
					<TableHeaderColumn dataField='simulationAddress' editable={false} autoValue={true}>Simulation Address</TableHeaderColumn>
					<TableHeaderColumn dataField='simulationPort'>Port</TableHeaderColumn>
					<TableHeaderColumn dataField='emails'>Email(s)</TableHeaderColumn>
					<TableHeaderColumn dataFormat={this.actionButtons.bind(this)} editable={false} autoValue={true}>Action</TableHeaderColumn>
				</BootstrapTable>

				<EditModal ref="editModal"/>
			</div>
		);
	}
});

var Scenario = React.createClass({
	render: function() {
		return (
			<div>
				<PageTitle 
				iconClassName="glyphicon glyphicon-list-alt"
				primaryText="Scenario"
				secondaryText="List of testing scenario" />

				<ScenarioList 
				url="http://10.151.36.30:3000/scenario"/>
			</div>
		);
	}
});



var container = ReactDOM.render(<Scenario />, document.getElementById('container'));	
