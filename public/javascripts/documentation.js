
var DashboardDocs = React.createClass({
  render: function() {
    return (
      <div className="module-container">
        <h3>Dashboard</h3>
        <div className="well">
          When navigating to <b>dashboard page</b>, you will see statistics, such as: <br/>
          <ul>
            <li>amount of scenarios listed for your account</li>
            <li>amount of penetration testing results generated for your scenarios</li>
          </ul>
        </div>
      </div>
    );
  }
});


var ScenarioDocs = React.createClass({
  render: function() {
    return (
      <div className="module-container">
        <h3>Scenario</h3>
        <div className="well">
          When navigating to <b>scenario page</b>, you can do several stuff, such as: <br/>
          <ul>
            <li>viewing all of scenarios listed for your account in table form</li>
            <li>adding new scenario</li>
            <li>update existing scenario</li>
            <li>update configuration file for scenario</li>
            <li>remove existing scenario</li>
            <li>run existing scenario</li>
          </ul>
          <br/>
          <h4>Adding New Scenario</h4>
          <p>
              To add new scenario, 
              click <button type="button" className="btn btn-small btn-info react-bs-table-add-btn" ><i className="glyphicon glyphicon-plus"></i>New</button> button
              , then pop up dialog will be appeared with several field. Fill <b>Title</b> using your project title
              , <b>Application Name</b> with project name using lower case without space (for example if project name is Chat Application, set Application Name to chat_application)
              , <b>Repository</b> using your project GitHub repository
              , <b>Port</b> using port that will be used to run your application in sandbox
              , <b>Email(s)</b> with your team member email separated by comma (,) without space for example: me@mail.com,you@mail.com,him@mail.com.
              Finally click <button type="button" className="btn btn-info">Save</button> button.
          </p>

          <h4>Update Existing Scenario</h4>
          <p>
              To update existing scenario, 
              click <div className="btn btn-warning" ><i className="glyphicon glyphicon-pencil"></i></div> button in Action column of table
              , then pop up dialog will be appeared with several field the same as adding new scenario.
              Change necessary field then click <button type="button" className="btn btn-info">Save</button> button.
          </p>

          <h4>Update Configuration File</h4>
          <p>
              Configuration file is file in your application directory that must be changed to match your environment variable.
              For example, some application has database configuration file that must be filled with correct value so the application can start smoothly.
              Rather than editing those files directly in sandbox environment, we can edit it using this feature.
              To update configuration file, 
              click <a className="btn btn-primary" href="/scenario/configs/1"><i className="glyphicon glyphicon-cog"></i></a> button in Action column of table
              , then you will be redirected to another page. In this page you must define all configuration files and their content. Then define one file called 
              config.json to tell the system which file to be replaced in your application directory.    
          </p>

          <h4>Remove Existing Scenario</h4>
          <p>
              To remove existing scenario, 
              click <div className="btn btn-danger" ><i className="glyphicon glyphicon-trash"></i></div> button in Action column of table
              If you want to remove several scenarios at once just fill checkbox to the left 
              and click <button type="button" className="btn btn-warning react-bs-table-del-btn"><i className="glyphicon glyphicon-trash"></i>Delete</button>
          </p>

          <h4>Run Existing Scenario</h4>
          <p>
              Run existing scenario mean starting penetration testing activity for scenario. This activity include pulling new commit from repository,
              deploying application in sandbox and doing penetration testing.
              To run existing scenario, 
              click <div className="btn btn-success" ><i className="glyphicon glyphicon-play-circle"></i></div> button in Action column of table.
          </p>
        </div>
      </div>
    );
  }
});

var ResultDocs = React.createClass({
  render: function() {
    return (
      <div className="module-container">
        <h3>Result</h3>
        <div className="well">
          When navigating to <b>result page</b>, you will be shown list of penetration testing results for your scenarios. Just select scenario from dropdown menu
          which results will be displayed dan list of results will be appeared. You can view detail informations about each vulnerability shown in the result.
        </div>
      </div>
    );
  }
});

var ClientDocs = React.createClass({
  render: function() {
    return (
      <div className="module-container">
        <h3>Client Script</h3>
        <div className="well">
          We provide some script to help you doing client operation without accessing our website interface.
          These scripts run in Python language and ready to be used by your application as a third party script 
          to connect to our service. These scripts can do several action, including: starting penetration testing for certain scenario and getting the results.
          You can download the scripts <a href="/client/pentester-client.zip">here</a>.
        </div>
      </div>
    );
  }
});

var Documentation = React.createClass({
  componentDidMount: function() {
    $('#loadingContainer').fadeOut();
  },
  render: function() {
    return (
      <div>
        <PageTitle 
        iconClassName="glyphicon glyphicon-book"
        primaryText="Documentation"
        secondaryText="List of features and descriptions"/>

        <DashboardDocs />
        <ScenarioDocs />
        <ResultDocs />
        <ClientDocs />
      </div>
    );
  }
});



var container = ReactDOM.render(<Documentation/>, document.getElementById('container'));  