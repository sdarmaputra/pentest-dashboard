var ShowDetailModal = React.createClass({
  getInitialState: function() {
    return {applicationName: '', runningToken: '', createClass: ''};
  },
  initState: function() {
    this.setState({
      targetUrl: this.props.targetUrl,
      vulnerability: this.props.vulnerability,
      severity: this.props.severity,
      description: this.props.description,
      longDescription: this.props.longDescription,
      recommendation: this.props.recommendation,
      references: this.props.references })
  },
  render: function() {
    var references = this.state.references;
    var referencesText = '';
    if (references != undefined) {
      references.forEach(function(value, index, arr) {
        referencesText += value.url + " (" + value.title + "); ";
      });
    }
      
    return (
      <div className="modal fade" id="showDetailModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel">
        <div className="modal-dialog modal-lg" role="document">
          <div className="modal-content">
            <div className="modal-header">
              <button type="button" className="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
              <h4 className="modal-title" id="editModalLabel">Result Information</h4>
            </div>
            <div className="modal-body">
              <form>
                <div className="form-group">
                  <label>Target URL</label>
                  <input type="text" placeholder="Target URL" value={this.state.targetUrl} className=" form-control editor edit-text" disabled/>
                </div>
                <div className="form-group">
                  <label>Vulnerability</label>
                  <input type="text" placeholder="Vulnerability" value={this.state.vulnerability} className=" form-control editor edit-text" disabled/>
                </div>
                <div className="form-group">
                  <label>Severity</label>
                  <input type="text" placeholder="Severity" value={this.state.severity} className=" form-control editor edit-text" disabled/>
                </div>
                <div className="form-group">
                  <label>Description</label>
                  <textarea rows="7" placeholder="Description" value={this.state.description} className=" form-control editor edit-text" disabled/>
                </div>
                <div className="form-group">
                  <label>Long Description</label>
                  <textarea rows="7" placeholder="Long Description" value={this.state.longDescription} className=" form-control editor edit-text" disabled/>
                </div>
                <div className="form-group">
                  <label>Recommendation</label>
                  <textarea rows="7" placeholder="Recommendation" value={this.state.recommendation} className=" form-control editor edit-text" disabled/>
                </div>
                <div className="form-group">
                  <label>References</label>
                  <textarea rows="4" placeholder="Recommendation" value={referencesText} className=" form-control editor edit-text" disabled/>
                </div>
              </form>
            </div>
            <div className="modal-footer">
              <button type="button" className="btn btn-default" data-dismiss="modal">Close</button>
            </div>
          </div>
        </div>
      </div>
    );
  }
});

var ShowDetailButton = React.createClass({
  render: function() {
    return (
      <a className="btn btn-success" href="#" 
        data-toggle="modal" data-target="#showDetailModal" 
        onClick={this.props.showDetailCallback.bind(this, this.props.row)}>
        <i className="glyphicon glyphicon-eye-open"/> Show Detail
      </a>
    );
  }
});

var ResultList = React.createClass({
  actionButtons: function(cell, row) {
    var targetUrl = "http://10.151.36.30:4000/result/" + row.runningToken;
    return (
      <div className="btn-group btn-group-sm">
        <ShowDetailButton 
          row={row}
          showDetailCallback={this.handleShowDetail}/>
      </div>
    );
  },
  handleShowDetail: function(row) {
    this.refs.showDetailModal.props.targetUrl = row.targetUrl;
    this.refs.showDetailModal.props.vulnerability = row.vulnerability;
    this.refs.showDetailModal.props.severity = row.severity;
    this.refs.showDetailModal.props.description = row.description;
    this.refs.showDetailModal.props.longDescription = row.longDescription;
    this.refs.showDetailModal.props.recommendation = row.recommendation;
    this.refs.showDetailModal.props.references = row.references;
    this.refs.showDetailModal.initState();
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    var getUrl = "http://10.151.36.30:3000/result/scenario/" + this.props.scenarioId + "/" + this.props.runningToken;
    $.ajax({
      url: getUrl,
      dataType: 'json',
      success: function(data) {
        if (data != null) {
          var rawDetail = data.detail;
          var objectDetail = JSON.parse(rawDetail);
          var arrayDetail = $.map(objectDetail, function(value, index) {
            if (index != 'targetUrls') {
              value['number'] = index;  
              return [value];
            }
          });
          this.setState({data: arrayDetail});
        }
          
        $('#loadingContainer').fadeOut();
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  render: function() {
    return (
      <div>
        <BootstrapTable 
        data={this.state.data} 
        hover={true}
        search={true}
        pagination={true}>
          <TableHeaderColumn dataField='number' isKey={true} width="40">#</TableHeaderColumn>
          <TableHeaderColumn dataField='vulnerability'>Vulnerability</TableHeaderColumn>
          <TableHeaderColumn dataField='severity'>Severity</TableHeaderColumn>
          <TableHeaderColumn dataField='description'>Description</TableHeaderColumn>
          <TableHeaderColumn dataFormat={this.actionButtons.bind(this)} editable={false} autoValue={true}>Action</TableHeaderColumn>
        </BootstrapTable>

        <ShowDetailModal ref="showDetailModal" />
      </div>
    );
  }
});

var ResultBox = React.createClass({
  render: function() {
    return (
      <div className="module-container">
        <ResultList
          scenarioId={this.props.scenarioId}
          runningToken={this.props.runningToken} />
      </div>
    );
  }
});

var ResultContainer = React.createClass({
  render: function() {
    var scenarioId = $('#scenarioId').val();
    var runningToken = $('#runningToken').val();
    
    return (
      <div>
        <PageTitle 
        iconClassName="glyphicon glyphicon-list"
        primaryText="Result Detail"
        secondaryText="List of scan result"
        showBackButton={true}
        backButtonHref="http://10.151.36.30:4000/result" />
      
        <ResultBox 
          scenarioId={scenarioId}
          runningToken={runningToken}/>
      </div>
    );
  }
});



var container = ReactDOM.render(<ResultContainer />, document.getElementById('container'));  