var EditModal = React.createClass({
	getInitialState: function() {
		return {id: '', title: '', description: '', file: ''};
	},
	initState: function() {
		this.setState({
			id: this.props.id, 
			title: this.props.title, 
			description: this.props.description, 
			file: this.props.file});
	},
	handleTitleChange: function(event) {
		this.setState({title: event.target.value, id: this.props.id});
	},
	handleDescriptionChange: function(event) {
		this.setState({description: event.target.value, id: this.props.id});
	},
	handleFileChange: function(event) {
		this.setState({file: event.target.value, id: this.props.id});
	},
	handleFormSubmit: function() {
		this.props.updateCallback(this.state);
	},
	render: function() {
		return (
			<div className="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel">
				<div className="modal-dialog modal-sm" role="document">
					<div className="modal-content">
						<div className="modal-header">
							<button type="button" className="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
							<h4 className="modal-title" id="editModalLabel">Edit Record</h4>
						</div>
						<div className="modal-body">
							<form>
								<div className="form-group">
									<label>Title</label>
									<input type="text" placeholder="Title" value={this.state.title} className=" form-control editor edit-text" onChange={this.handleTitleChange}/>
								</div>
								<div className="form-group">
									<label>Description</label>
									<input type="text" placeholder="Description" value={this.state.description} className=" form-control editor edit-text" onChange={this.handleDescriptionChange}/>
								</div>
								<div className="form-group">
									<label>File</label>
									<input type="text" placeholder="File" value={this.state.file} className=" form-control editor edit-text" onChange={this.handleFileChange}/>
								</div>
							</form>
						</div>
						<div className="modal-footer">
							<button type="button" className="btn btn-default" data-dismiss="modal">Close</button>
							<button type="button" className="btn btn-info" onClick={this.handleFormSubmit.bind(this)}>Save</button>
						</div>
					</div>
				</div>
			</div>
		);
	}
});

var ButtonEdit = React.createClass({
	render: function() {
		var content = this.props.content;
		return (
			<div className="btn btn-warning" data-toggle="modal" data-target="#editModal" onClick={this.props.updateAction.bind(this, content)}>
				<i className="glyphicon glyphicon-pencil"/> Edit
			</div>
		);
	}
});

var ButtonDelete = React.createClass({
	render: function() {
		var key = this.props.deleteKey
		return (
			<div className="btn btn-danger" onClick={this.props.deleteAction.bind(this, key)}>
				<i className="glyphicon glyphicon-trash"/> Delete
			</div>
		);
	}
});

var ActionButtons = React.createClass({
	render: function() {
		var buttonEdit;
		var buttonDelete;
		if (this.props.editButton) {
			buttonEdit = <ButtonEdit 
					updateKey={this.props.elementKey}
					updateAction={this.props.updateAction}
					content={this.props.content}
					updateCallback={this.props.updateCallback} />;
		}
		if (this.props.deleteButton) {
			buttonDelete = <ButtonDelete 
					deleteKey={this.props.elementKey} 
					deleteAction={this.props.deleteAction} />;
		}
		return (
			<div className="btn-group btn-group-sm">
				{buttonEdit}
				{buttonDelete}				
			</div>
		);
	}
});

var AttackList = React.createClass({
	selectRowProp: {
			mode: "checkbox"
	},
	actionButtons: function(cell, row){
		var editUrl = this.props.url + "/edit/" + row.id;
		var deleteUrl = this.props.url + "/destroy/" + row.id;
		var key = row.id;
		return (
			<ActionButtons 
				editButton={true} 
				deleteButton={true} 
				elementKey={key}
				content={row} 
				deleteAction={this.deleteAttack} 
				updateAction={this.updateAttack}
				updateCallback={this.handleAttackUpdate}/>
		);
	},
	updateAttack: function(row) {
		this.refs.editModal.props.id = row.id;
		this.refs.editModal.props.title = row.title;
		this.refs.editModal.props.description = row.description;
		this.refs.editModal.props.file = row.file;
		this.refs.editModal.props.updateCallback = this.handleAttackUpdate;
		this.refs.editModal.initState();
	},
	deleteAttack: function(key) {
		$.ajax({
			url: this.props.url+'/destroy/'+key,
			dataType: 'json',
			type: 'DELETE',
			success: function(data) {
				alert('delete record: '+data.status);
				$.ajax({
					url: this.props.url,
					dataType: 'json',
					success: function(data) {
						this.setState({data: data});
					}.bind(this),
					error: function(xhr, status, err) {
						console.error(this.props.url, status, err.toString());
					}.bind(this)
				});
			}.bind(this),
			error: function(xhr, status, err) {
				console.error(this.props.url+'/destroy/'+key, status, err.toString());
			}.bind(this)
		});
	},
	handleAttackSubmit: function(row) {
		$.ajax({
			url: this.props.url+'/store',
			dataType: 'json',
			type:'POST',
			data: row,
			success: function(data) {
				this.setState({data: data});
			}.bind(this),
			error: function(xhr, status, err) {
				console.error(this.props.url+'/store', status, err.toString());
			}.bind(this)
		});
	},
	handleAttackUpdate: function(row) {
		$.ajax({
			url: this.props.url+'/update/'+row.id,
			dataType: 'json',
			type:'POST',
			data: row,
			success: function(data) {
				alert('update record: '+data.status);
				$.ajax({
					url: this.props.url,
					dataType: 'json',
					success: function(data) {
						this.setState({data: data});
					}.bind(this),
					error: function(xhr, status, err) {
						console.error(this.props.url, status, err.toString());
					}.bind(this)
				});
			}.bind(this),
			error: function(xhr, status, err) {
				console.error(this.props.url+'/update', status, err.toString());
			}.bind(this)
		});	
	},
	handleAttackDelete: function(rowKeys) {
		var deleteAttack = this.deleteAttack;
		rowKeys.forEach(function(key) {
			deleteAttack(key);
		});
	},
	getInitialState: function() {
		return {data: [], url: this.props.url};
	},
	componentDidMount: function() {
		$.ajax({
			url: this.props.url,
			dataType: 'json',
			success: function(data) {
				this.setState({data: data});
			}.bind(this),
			error: function(xhr, status, err) {
				console.error(this.props.url, status, err.toString());
			}.bind(this)
		});
	},
	render: function() {
		return (
			<div className="module-container">
				<BootstrapTable 
				data={this.state.data} 
				insertRow={true} 
				deleteRow={true} 
				selectRow={this.selectRowProp} 
				hover={true}
				search={true}
				pagination={true}
				options={{afterInsertRow: this.handleAttackSubmit, afterDeleteRow:this.handleAttackDelete}}>
					<TableHeaderColumn dataField='id' isKey={true} hidden={true} editable={false} autoValue={true}>ID</TableHeaderColumn>
					<TableHeaderColumn dataField='title'>Title</TableHeaderColumn>
					<TableHeaderColumn dataField='description'>Description</TableHeaderColumn>
					<TableHeaderColumn dataField='file'>File</TableHeaderColumn>
					<TableHeaderColumn dataFormat={this.actionButtons.bind(this)} editable={false} autoValue={true}>Action</TableHeaderColumn>
				</BootstrapTable>

				<EditModal ref="editModal"/>
			</div>
		);
	}
});

var Attack = React.createClass({
	render: function() {
		return (
			<div>
				<PageTitle 
				iconClassName="glyphicon glyphicon-knight"
				primaryText="Attack"
				secondaryText="Sets off attack you can use" />

				<AttackList 
				url="http://10.151.36.30:3000/attack"/>
			</div>
		);
	}
});


ReactDOM.render(
	<Attack />, document.getElementById('container')
);	


