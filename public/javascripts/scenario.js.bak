var RunnerModal = React.createClass({
	getInitialState: function() {
		return {result: ''};
	},
	_pushResult: function(data) {
		console.log(data);
		this.setState({result: data});
	},
	render: function() {
		console.log(this.state.result);
		return (
			<div className="modal fade" id="runnerModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel">
				<div className="modal-dialog modal-lg" role="document">
					<div className="modal-content">
						<div className="modal-header">
							<button type="button" className="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
							<h4 className="modal-title" id="editModalLabel">Running Result</h4>
						</div>
						<div className="modal-body">
							<div id="result"></div>
						</div>
						<div className="modal-footer">
							<button type="button" className="btn btn-default" data-dismiss="modal">Close</button>
							<button type="button" className="btn btn-info">Save</button>
						</div>
					</div>
				</div>
			</div>
		);
	}
});

var EditModal = React.createClass({
	getInitialState: function() {
		return {id: '', title: '', applicationName: '', repository: '', simulationUrl: '', attacks_id: ''};
	},
	initState: function() {
		this.setState({
			id: this.props.id, 
			title: this.props.title, 
			applicationName: this.props.applicationName, 
			repository: this.props.repository,
			simulationUrl: this.props.simulationUrl,
			attacks_id: this.props.attacks_id});
	},
	handleTitleChange: function(event) {
		this.setState({title: event.target.value, id: this.props.id});
	},
	handleApplicationNameChange: function(event) {
		this.setState({applicationName: event.target.value, id: this.props.id});
	},
	handleRepositoryChange: function(event) {
		this.setState({repository: event.target.value, id: this.props.id});
	},
	handleSimulationUrlChange: function(event) {
		this.setState({simulationUrl: event.target.value, id: this.props.id});
	},
	handleAttacksIdChange: function(event) {
		this.setState({attacks_id: event.target.value, id: this.props.id});
	},
	handleFormSubmit: function() {
		this.props.updateCallback(this.state);
	},
	render: function() {
		return (
			<div className="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel">
				<div className="modal-dialog modal-sm" role="document">
					<div className="modal-content">
						<div className="modal-header">
							<button type="button" className="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
							<h4 className="modal-title" id="editModalLabel">Edit Record</h4>
						</div>
						<div className="modal-body">
							<form>
								<div className="form-group">
									<label>Title</label>
									<input type="text" placeholder="Title" value={this.state.title} className=" form-control editor edit-text" onChange={this.handleTitleChange}/>
								</div>
								<div className="form-group">
									<label>Application Name</label>
									<input type="text" placeholder="Application Name" value={this.state.applicationName} className=" form-control editor edit-text" onChange={this.handleApplicationNameChange}/>
								</div>
								<div className="form-group">
									<label>Repository</label>
									<input type="text" placeholder="Repository" value={this.state.repository} className=" form-control editor edit-text" onChange={this.handleRepositoryChange}/>
								</div>
								<div className="form-group">
									<label>Simlulation URL</label>
									<input type="text" placeholder="Simlulation URL" value={this.state.simulationUrl} className=" form-control editor edit-text" onChange={this.handleSimulationUrlChange}/>
								</div>
								<div className="form-group">
									<label>Attack Type</label>
									<input type="text" placeholder="Attack Type" value={this.state.attacks_id} className=" form-control editor edit-text" onChange={this.handleAttacksIdChange}/>
								</div>
							</form>
						</div>
						<div className="modal-footer">
							<button type="button" className="btn btn-default" data-dismiss="modal">Close</button>
							<button type="button" className="btn btn-info" onClick={this.handleFormSubmit.bind(this)}>Save</button>
						</div>
					</div>
				</div>
			</div>
		);
	}
});

var ButtonRun = React.createClass({
	runScenario: function() {
		$.ajax({
			url: 'http://10.151.36.30:3000/runner/run/'+this.props.runKey,
			dataType: 'json',
			success: function(data) {
				alert('Run scenario: '+ data.status);
			}.bind(this),
			error: function(xhr, status, err) {
				console.error(this.props.url, status, err.toString());
			}.bind(this)
		});
	},
	render: function() {
		var content = this.props.content;
		return (
			<div className="btn btn-success" data-toggle="modal" data-target="#runnerModal" onClick={this.runScenario}>
				<i className="glyphicon glyphicon-play-circle"/> 
			</div>
		);
	}
});

var ButtonEdit = React.createClass({
	render: function() {
		var content = this.props.content;
		return (
			<div className="btn btn-warning" data-toggle="modal" data-target="#editModal" onClick={this.props.updateAction.bind(this, content)}>
				<i className="glyphicon glyphicon-pencil"/> 
			</div>
		);
	}
});

var ButtonDelete = React.createClass({
	render: function() {
		var key = this.props.deleteKey
		return (
			<div className="btn btn-danger" onClick={this.props.deleteAction.bind(this, key)}>
				<i className="glyphicon glyphicon-trash"/> 
			</div>
		);
	}
});

var ActionButtons = React.createClass({
	render: function() {
		var buttonEdit;
		var buttonDelete;
		var buttonRun;
		if (this.props.editButton) {
			buttonEdit = <ButtonEdit 
					updateKey={this.props.elementKey}
					updateAction={this.props.updateAction}
					content={this.props.content}
					updateCallback={this.props.updateCallback} />;
		}
		if (this.props.deleteButton) {
			buttonDelete = <ButtonDelete 
					deleteKey={this.props.elementKey} 
					deleteAction={this.props.deleteAction} />;
		}
		if(this.props.runButton) {
			buttonRun = <ButtonRun
					content={this.props.content}
					runKey={this.props.elementKey} />;
		}
		return (
			<div className="btn-group btn-group-sm">
				{buttonRun}
				{buttonEdit}
				{buttonDelete}				
			</div>
		);
	}
});

var ScenarioList = React.createClass({
	selectRowProp: {
			mode: "checkbox"
	},
	actionButtons: function(cell, row){
		var editUrl = this.props.url + "/edit/" + row.id;
		var deleteUrl = this.props.url + "/destroy/" + row.id;
		var key = row.id;
		return (
			<ActionButtons 
				editButton={true} 
				deleteButton={true}
				runButton={true} 
				elementKey={key}
				content={row} 
				deleteAction={this.deleteScenario} 
				updateAction={this.updateScenario}
				updateCallback={this.handleScenarioUpdate}/>
		);
	},
	updateScenario: function(row) {
		this.refs.editModal.props.id = row.id;
		this.refs.editModal.props.title = row.title;
		this.refs.editModal.props.applicationName = row.applicationName;
		this.refs.editModal.props.repository = row.repository;
		this.refs.editModal.props.simulationUrl = row.simulationUrl;
		this.refs.editModal.props.attacks_id = row.attacks_id;
		this.refs.editModal.props.updateCallback = this.handleScenarioUpdate;
		this.refs.editModal.initState();
	},
	deleteScenario: function(key) {
		$('#loadingContainer').fadeIn();
		$.ajax({
			url: this.props.url+'/destroy/'+key,
			dataType: 'json',
			type: 'DELETE',
			success: function(data) {
				var deletedData = data;
				$.ajax({
					url: this.props.url,
					dataType: 'json',
					success: function(data) {
						data.forEach(function(item){
							if (item.attack != null) {
								item.attackTitle = item.attack.title;	
							} else {
								item.attackTitle = '';
							}
						});
						this.setState({data: data});
						$('#loadingContainer').fadeOut(function(){
							alert('delete record: '+deletedData.status);
						});
					}.bind(this),
					error: function(xhr, status, err) {
						console.error(this.props.url, status, err.toString());
					}.bind(this)
				});
			}.bind(this),
			error: function(xhr, status, err) {
				console.error(this.props.url+'/destroy/'+key, status, err.toString());
			}.bind(this)
		});
	},
	handleScenarioSubmit: function(row) {
		row.simulationAddress = '';
		if (row.attacks_id != '') {
			$('#loadingContainer').fadeIn();
			$.ajax({
				url: this.props.url+'/store',
				dataType: 'json',
				type:'POST',
				data: row,
				success: function(data) {
					data.forEach(function(item){
						if (item.attack != null) {
							item.attackTitle = item.attack.title;	
						} else {
							item.attackTitle = '';
						}
					});
					this.setState({data: data});
					$('#loadingContainer').fadeOut(function(){
						alert('Scenario created for: '+row.title);	
					});
				}.bind(this),
				error: function(xhr, status, err) {
					console.error(this.props.url+'/store', status, err.toString());
				}.bind(this)
			});
		} else {
			$('#loadingContainer').fadeIn();
			$.ajax({
				url: this.props.url,
				dataType: 'json',
				success: function(data) {
					data.forEach(function(item){
						if (item.attack != null) {
							item.attackTitle = item.attack.title;	
						} else {
							item.attackTitle = '';
						}
					});
					this.setState({data: data});
					$('#loadingContainer').fadeOut(function(){
						alert('Attack must be specified!');
					});
				}.bind(this),
				error: function(xhr, status, err) {
					console.error(this.props.url, status, err.toString());
				}.bind(this)
			});
		}
		
	},
	handleScenarioUpdate: function(row) {
		$('#loadingContainer').fadeIn();
		$.ajax({
			url: this.props.url+'/update/'+row.id,
			dataType: 'json',
			type:'POST',
			data: row,
			success: function(data) {
				var updatedData = data;
				$('#editModal').modal('hide');
				$.ajax({
					url: this.props.url,
					dataType: 'json',
					success: function(data) {
						data.forEach(function(item){
							if (item.attack != null) {
								item.attackTitle = item.attack.title;	
							} else {
								item.attackTitle = '';
							}
						});
						this.setState({data: data});
						$('#loadingContainer').fadeOut(function() {
							alert('update record: '+updatedData.status);
						});
					}.bind(this),
					error: function(xhr, status, err) {
						console.error(this.props.url, status, err.toString());
					}.bind(this)
				});
			}.bind(this),
			error: function(xhr, status, err) {
				console.error(this.props.url+'/update', status, err.toString());
			}.bind(this)
		});	
	},
	handleScenarioDelete: function(rowKeys) {
		var deleteScenario = this.deleteScenario;
		rowKeys.forEach(function(key) {
			deleteScenario(key);
		});
	},
	getInitialState: function() {
		return {data: [], url: this.props.url};
	},
	componentDidMount: function() {
		$.ajax({
			url: this.props.url,
			dataType: 'json',
			success: function(data) {
				data.forEach(function(item){
					if (item.attack != null) {
						item.attackTitle = item.attack.title;	
					} else {
						item.attackTitle = '';
					}
				});
				this.setState({data: data});
				$('#loadingContainer').fadeOut();
			}.bind(this),
			error: function(xhr, status, err) {
				console.error(this.props.url, status, err.toString());
			}.bind(this)
		});
	},
	render: function() {
		return (
			<div className="module-container">
				<BootstrapTable 
				data={this.state.data} 
				insertRow={true} 
				deleteRow={true} 
				selectRow={this.selectRowProp} 
				hover={true}
				search={true}
				pagination={true}
				options={{afterInsertRow: this.handleScenarioSubmit, afterDeleteRow:this.handleScenarioDelete}}>
					<TableHeaderColumn dataField='id' isKey={true} hidden={true} editable={false} autoValue={true}>ID</TableHeaderColumn>
					<TableHeaderColumn dataField='title'>Title</TableHeaderColumn>
					<TableHeaderColumn dataField='applicationName'>Application Name</TableHeaderColumn>
					<TableHeaderColumn dataField='repository'>Repository</TableHeaderColumn>
					<TableHeaderColumn dataField='simulationAddress' editable={false} autoValue={true}>Simulation Address</TableHeaderColumn>
					<TableHeaderColumn dataField='simulationPort'>Port</TableHeaderColumn>
					<TableHeaderColumn dataFormat={this.actionButtons.bind(this)} editable={false} autoValue={true}>Action</TableHeaderColumn>
				</BootstrapTable>

				<EditModal ref="editModal"/>
			</div>
		);
	}
});

var Scenario = React.createClass({
	render: function() {
		return (
			<div>
				<PageTitle 
				iconClassName="glyphicon glyphicon-list-alt"
				primaryText="Scenario"
				secondaryText="List of testing scenario" />

				<ScenarioList 
				url="http://10.151.36.30:3000/scenario"/>
			</div>
		);
	}
});



var container = ReactDOM.render(<Scenario />, document.getElementById('container'));	
var runnerContainer = ReactDOM.render(<RunnerModal />, document.getElementById('runnerContainer'));
