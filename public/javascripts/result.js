var ScenarioDropdown = React.createClass({
  getInitialState: function() {
    return {options: null, currIndex: null};
  },
  componentDidMount: function() {
    $.ajax({
      url: "http://10.151.36.30:3000/scenario",
      dataType: 'json',
      success: function(data) {
        var scenarioArray = $.map(data, function(value, index){
          return {value: value.id, label: value.title + " (" + value.applicationName + ")"};
        });

        this.setState({options: scenarioArray});
        $('#loadingContainer').fadeOut();
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleChange: function(val) {
    this.props.indexChangeCallback(val.value);
    this.setState({currIndex: val.value});
  },
  render: function() {
    return (
      <div className="filter-container">
        <div className="form-group">
          <label>Scenario: </label>
          <Select
            name="scenarioDropdown"
            value={this.state.currIndex}
            options={this.state.options}
            onChange={this.handleChange} />
        </div>
      </div>
    );
  }
});

var ShowDetailModal = React.createClass({
  getInitialState: function() {
    return {applicationName: '', runningToken: '', createClass: ''};
  },
  initState: function() {
    this.setState({
      applicationName: this.props.applicationName, 
      runningToken: this.props.runningToken,
      createdAt: this.props.createdAt});
  },
  render: function() {
    return (
      <div className="modal fade" id="showDetailModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel">
        <div className="modal-dialog" role="document">
          <div className="modal-content">
            <div className="modal-header">
              <button type="button" className="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
              <h4 className="modal-title" id="editModalLabel">Result Information</h4>
            </div>
            <div className="modal-body">
              <form>
                <div className="form-group">
                  <label>Application Name</label>
                  <input type="text" placeholder="Application Name" value={this.state.applicationName} className=" form-control editor edit-text" disabled/>
                </div>
                <div className="form-group">
                  <label>Running Token</label>
                  <textarea placeholder="Running Token" value={this.state.runningToken} className=" form-control editor edit-text" disabled/>
                </div>
                <div className="form-group">
                  <label>Date Created</label>
                  <input type="text" placeholder="Date Created" value={this.state.createdAt} className=" form-control editor edit-text" disabled/>
                </div>
              </form>
            </div>
            <div className="modal-footer">
              <button type="button" className="btn btn-default" data-dismiss="modal">Close</button>
            </div>
          </div>
        </div>
      </div>
    );
  }
});

var ShowDetailButton = React.createClass({
  render: function() {
    return (
      <a className="btn btn-success" href="#" 
        data-toggle="modal" data-target="#showDetailModal" 
        onClick={this.props.showDetailCallback.bind(this, this.props.row)}>
        <i className="glyphicon glyphicon-eye-open"/>
      </a>
    );
  }
});

var ShowResultButton = React.createClass({
  render: function() {
    return (
      <a className="btn btn-primary" href={this.props.targetUrl}>
        <i className="glyphicon glyphicon-list"/> Show result
      </a>
    );
  }
});

var ResultList = React.createClass({
  retrieveData: function(index) {
    $.ajax({
      url: this.props.getUrl + "/" +index,
      dataType: 'json',
      success: function(data) {
        this.setState({data: data});
        $('#loadingContainer').fadeOut();
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  actionButtons: function(cell, row) {
    var targetUrl = "http://10.151.36.30:4000/result/" + row.runningToken;
    return (
      <div className="btn-group btn-group-sm">
        <ShowDetailButton 
          row={row}
          showDetailCallback={this.handleShowDetail}/>
        <ShowResultButton
          targetUrl={targetUrl} />
      </div>
    );
  },
  handleIndexChange: function(index) {
    this.setState({currIndex: index});
    this.retrieveData(index);
  },
  handleShowDetail: function(row) {
    this.refs.showDetailModal.props.applicationName = row.scenario.applicationName;
    this.refs.showDetailModal.props.runningToken = row.runningToken;
    this.refs.showDetailModal.props.createdAt = row.createdAt;
    this.refs.showDetailModal.initState();
  },
  getInitialState: function() {
    return {data: [], currIndex: null};
  },
  componentDidMount: function() {
    this.retrieveData(this.state.currIndex);
  },
  render: function() {
    return (
      <div>
        <ScenarioDropdown indexChangeCallback={this.handleIndexChange}/>

        <BootstrapTable 
        data={this.state.data} 
        hover={true}
        search={true}
        pagination={true}>
          <TableHeaderColumn dataField='id' isKey={true} hidden={true} editable={false} autoValue={true}>ID</TableHeaderColumn>
          <TableHeaderColumn dataField='runningToken'>Token</TableHeaderColumn>
          <TableHeaderColumn dataField='createdAt'>Tanggal Dibuat</TableHeaderColumn>
          <TableHeaderColumn dataFormat={this.actionButtons.bind(this)} editable={false} autoValue={true}>Action</TableHeaderColumn>
        </BootstrapTable>

        <ShowDetailModal ref="showDetailModal" />
      </div>
    );
  }
});

var ResultBox = React.createClass({
  render: function() {
    return (
      <div className="module-container">
        <ResultList
          getUrl={this.props.getUrl} />
      </div>
    );
  }
});

var ResultContainer = React.createClass({
  render: function() {
    return (
      <div>
        <PageTitle 
        iconClassName="glyphicon glyphicon-list"
        primaryText="Scan Result"
        secondaryText="Scan report(s) for scenario(s)" />
      
        <ResultBox 
          getUrl={"http://10.151.36.30:3000/result/scenario"}/>
      </div>
    );
  }
});



var container = ReactDOM.render(<ResultContainer />, document.getElementById('container'));  