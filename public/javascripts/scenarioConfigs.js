// Global variables and methods
var myCodeMirror;
var myFileName;
var Base64 = {
  _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
  encode: function(input) {
      var output = "";
      var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
      var i = 0;

      input = Base64._utf8_encode(input);

      while (i < input.length) {

          chr1 = input.charCodeAt(i++);
          chr2 = input.charCodeAt(i++);
          chr3 = input.charCodeAt(i++);

          enc1 = chr1 >> 2;
          enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
          enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
          enc4 = chr3 & 63;

          if (isNaN(chr2)) {
              enc3 = enc4 = 64;
          } else if (isNaN(chr3)) {
              enc4 = 64;
          }

          output = output + this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) + this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);
      }
      return output;
  },
  decode: function(input) {
      var output = "";
      var chr1, chr2, chr3;
      var enc1, enc2, enc3, enc4;
      var i = 0;

      input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

      while (i < input.length) {

          enc1 = this._keyStr.indexOf(input.charAt(i++));
          enc2 = this._keyStr.indexOf(input.charAt(i++));
          enc3 = this._keyStr.indexOf(input.charAt(i++));
          enc4 = this._keyStr.indexOf(input.charAt(i++));

          chr1 = (enc1 << 2) | (enc2 >> 4);
          chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
          chr3 = ((enc3 & 3) << 6) | enc4;

          output = output + String.fromCharCode(chr1);

          if (enc3 != 64) {
              output = output + String.fromCharCode(chr2);
          }
          if (enc4 != 64) {
              output = output + String.fromCharCode(chr3);
          }
      }
      output = Base64._utf8_decode(output);
      return output;
  },
  _utf8_encode: function(string) {
      string = string.replace(/\r\n/g, "\n");
      var utftext = "";

      for (var n = 0; n < string.length; n++) {

          var c = string.charCodeAt(n);

          if (c < 128) {
              utftext += String.fromCharCode(c);
          }
          else if ((c > 127) && (c < 2048)) {
              utftext += String.fromCharCode((c >> 6) | 192);
              utftext += String.fromCharCode((c & 63) | 128);
          }
          else {
              utftext += String.fromCharCode((c >> 12) | 224);
              utftext += String.fromCharCode(((c >> 6) & 63) | 128);
              utftext += String.fromCharCode((c & 63) | 128);
          }
      }
      return utftext;
  },
  _utf8_decode: function(utftext) {
      var string = "";
      var i = 0;
      var c = 0;
      var c1 = 0;
      var c2 = 0;

      while (i < utftext.length) {

          c = utftext.charCodeAt(i);

          if (c < 128) {
              string += String.fromCharCode(c);
              i++;
          }
          else if ((c > 191) && (c < 224)) {
              c2 = utftext.charCodeAt(i + 1);
              string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
              i += 2;
          }
          else {
              c2 = utftext.charCodeAt(i + 1);
              c3 = utftext.charCodeAt(i + 2);
              string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
              i += 3;
          }
      }
      return string;
  }
}


// Element Classes
var CodeEditor = React.createClass({
  renderEditorContent: function() {
    if (!this.props.isEmpty == true) {
      var decodedContent = Base64.decode(this.props.content);
      var saveButton = '';
    } else {
      var decodedContent = this.props.content;
    }
    
    var options = {
      lineNumbers: true
    }
    
    var editor = document.getElementById('editor');
    myFileName = document.getElementById('fileName');
    if (editor != undefined) {
      if (myCodeMirror == undefined) {
        myCodeMirror = CodeMirror(editor, {
          lineNumbers: true,
          theme: "rubyblue",
          value: decodedContent
        });  
      } else {
        myCodeMirror.getDoc().setValue(decodedContent);
      }
    }
  },
  handleFileNameChange: function() {
    this.setState({currFileName: event.target.value});
  },
  componentDidUpdate: function() {
    this.renderEditorContent();
  },
  componentDidMount: function() {
    this.renderEditorContent();
  },
  getInitialState: function() {
    return {currContent: '', currFileName: ''}
  },
  componentWillReceiveProps: function(nextProps) {
    this.setState({currContent: nextProps.content, currFileName: nextProps.title});
  },
  render: function() {
    return (
      <div>
        <form className="form-inline">
          <div className="form-group">
            <label for="fileName">File Name: </label>
            <input type="text" className="form-control" name="fileName" id="fileName" value={this.state.currFileName} onChange={this.handleFileNameChange.bind(this)}/>
          </div>
        </form>
        <div id="editor"></div>
        <a className="btn btn-lg btn-success" onClick={this.props.saveCallback.bind(this)}><i className="glyphicon glyphicon-ok"></i> Save Changes</a>
      </div>
    );
  }
});

var ListItem = React.createClass({
  render: function() {
    if (this.props.isActive == true) {
      var className = "list-group-item active";
    } else {
      var className = "list-group-item";
    }
    return(
      <div>
        <div className={className}> 
          <a className="btn" onClick={this.props.callback.bind(this, this.props.itemKey)}>
            {this.props.title} 
          </a>
          <a className="list-delete-button btn" onClick={this.props.deleteFileCallback.bind(this, this.props.itemKey)}>
            <i className="glyphicon glyphicon-remove-circle"></i>
          </a>
        </div>
      </div>
    );
  }
});

var FileList = React.createClass({
  render: function(){
    var menu = [];

    if (this.props.data.length != 0) {
      var customFiles = JSON.parse(this.props.data.customFiles);
      for (var key in customFiles) {
        if (customFiles.hasOwnProperty(key)) {
          if (this.props.currFile == key) {
            var isActive = true;
          } else {
            var isActive = false;
          }

          menu.push(<ListItem 
              isActive={isActive} 
              itemKey={key} 
              title={customFiles[key].title} 
              callback={this.props.callback} 
              deleteFileCallback={this.props.deleteFileCallback}/>);
        }
      }
    }
      
    return (
      <div className="list-group">
        {menu}
        <a className="btn btn-info btn-block" onClick={this.props.newFileCallback}><i className="glyphicon glyphicon-plus"></i> New Item</a>
      </div>
    );
  }
});

var PageContent = React.createClass({
  newFile: function() {
    var currentData = this.state.currData;
    var currentFiles = this.state.customFiles;
    var newFile = {title: '<Unnamed>', content: 'Ly9Zb3VyIGNvZGUgaGVyZQ=='};
    var newIndex = Object.keys(currentFiles).length;
    currentFiles[newIndex] = newFile;
    currentData.customFiles = JSON.stringify(currentFiles);
    this.setState({customFiles: currentFiles});
    this.setState({currData: currentData});
  },
  deleteFile: function(index) {
    $('#loadingContainer').fadeIn();
    console.log(this.state.currFile);
    this.setState({currFile: 0});
    var updatedData = this.state.currData;
    var currentFiles = this.state.customFiles;
    delete currentFiles[index];
    updatedData.customFiles = JSON.stringify(currentFiles);

    $.ajax({
      url: this.props.urlUpdate,
      dataType: 'json',
      type:'POST',
      data: updatedData,
      success: function(data) {
        var result = data;

        $.ajax({
          url: this.props.url,
          dataType: 'json',
          success: function(data) {
            this.setState({currData: data});
            if (this.state.currData.customFiles != undefined) {
              this.setState({customFiles: JSON.parse(this.state.currData.customFiles)});
            } else {
              this.setState({customFiles: {}});
            }
            $('#loadingContainer').fadeOut(function() {
              alert('delete record: '+result.status);
            });
          }.bind(this),
          error: function(xhr, status, err) {
            console.error(this.props.url, status, err.toString());
          }.bind(this)
        });
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    }); 
  },
  saveContent: function() {
    $('#loadingContainer').fadeIn();

    var newContent = Base64.encode(myCodeMirror.getDoc().getValue());
    var newFileName = myFileName.value;

    var updatedFile = this.state.customFiles[this.state.currFile];
    updatedFile.content = newContent;
    updatedFile.title = newFileName;
    
    var string = JSON.stringify(this.state.customFiles);
    var updatedData = this.state.currData;
    updatedData.customFiles = string;
    
    $.ajax({
      url: this.props.urlUpdate,
      dataType: 'json',
      type:'POST',
      data: updatedData,
      success: function(data) {
        var result = data;

        $.ajax({
          url: this.props.url,
          dataType: 'json',
          success: function(data) {
            this.setState({currData: data});
            if (this.state.currData.customFiles != undefined) {
              this.setState({customFiles: JSON.parse(this.state.currData.customFiles)});
            } else {
              this.setState({customFiles: {}});
            }
            
            $('#loadingContainer').fadeOut(function() {
              alert('update record: '+result.status);
            });
          }.bind(this),
          error: function(xhr, status, err) {
            console.error(this.props.url, status, err.toString());
          }.bind(this)
        });
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url+'/update', status, err.toString());
      }.bind(this)
    }); 
  },
  updateEditorContent: function(index) {
    this.setState({currFile: index});
  },
  componentDidMount: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      success: function(data) {
        this.setState({currData: data});
        if (this.state.currData.customFiles != undefined) {
          this.setState({customFiles: JSON.parse(this.state.currData.customFiles)});
        } else {
          this.setState({customFiles: {}});
        }
        $('#loadingContainer').fadeOut();
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
    $('#loadingContainer').fadeOut();
  },
  getInitialState: function() {
    return {currData: [], currFile: 0, customFiles: []};
  },
  render: function() {
    var thisCodeEditor;
    if (this.state.customFiles == undefined 
          || Object.keys(this.state.customFiles).length == 0 
          || (Array.isArray(this.state.customFiles) && this.state.customFiles.length == 0)
        ) 
    {
      var editorContent = '';
      thisCodeEditor = <CodeEditor isEmpty={true} content={"//Nothing to display."} saveCallback={this.saveContent}/>;
    } else {
      var editorContent = this.state.customFiles[this.state.currFile].content;
      var editorTitle = this.state.customFiles[this.state.currFile].title;
      thisCodeEditor = <CodeEditor title={editorTitle} content={editorContent} saveCallback={this.saveContent}/>;
    }
    
    return (
      <div className="module-container row">
        <div className="col-md-4 col-lg-3 col-sm-1">
          <FileList 
            data={this.state.currData} 
            currFile={this.state.currFile} 
            callback={this.updateEditorContent} 
            newFileCallback={this.newFile} 
            deleteFileCallback={this.deleteFile}/>
        </div>
        <div className="col-md-8 col-lg-9 col-sm-1">
          {thisCodeEditor}
        </div>
      </div>
    );
  }
});

var Configs = React.createClass({
  render: function() {
    var urlData = $('#urlData').val();
    var urlUpdate = $('#urlUpdate').val();
    return (
      <div>
        <PageTitle 
        iconClassName="glyphicon glyphicon-list-alt"
        primaryText="Configuration Files"
        secondaryText="List of dummy configuration files for testing purpose" />
      
        <PageContent url={urlData} urlUpdate={urlUpdate}/>
      </div>
    );
  }
});



var container = ReactDOM.render(<Configs />, document.getElementById('container'));  