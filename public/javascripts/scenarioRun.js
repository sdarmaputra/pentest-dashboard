var ResultBox = React.createClass({
  // showResult: function() {
  //   $.ajax({
  //     url: "http://10.151.36.30:3000/result/" + this.state.resultId,
  //     dataType: 'json',
  //     success: function(storeResult) {
  //       console.log(storeResult);
  //       this.setState({resultId: storeResult.id});
       
  //     }.bind(this),
  //     error: function(xhr, status, err) {
  //       console.error(this.props.url+'/update', status, err.toString());
  //     }.bind(this)
  //   });
  // },
  storeResult: function() {
    var insertData = {
      scenarios_id: this.props.scenarioId,
      detail: JSON.stringify(this.state.scanResult.results)
    }

    console.log("insert data: ");
    console.log(insertData);

    $.ajax({
      url: this.props.storeResultUrl,
      dataType: 'json',
      type:'POST',
      data: insertData,
      success: function(storeResult) {
        console.log(storeResult);
        this.setState({resultId: storeResult.id});
       
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url+'/update', status, err.toString());
      }.bind(this)
    });

  },
  startPentest: function() {
    var attackData = {
      target_url: this.state.attackTargetUrl,
      scanner_url: this.state.pentestAgentUrl
    }
    console.log('start pentest using ' + attackData.scanner_url + ' to ' + attackData.target_url);
    $.ajax({
      url: this.props.pentestAgentScanUrl,
      dataType: 'json',
      type:'POST',
      data: attackData,
      success: function(scanResult) {
        console.log(scanResult);
        this.setState({scanResult: scanResult});
        this.storeResult();
      
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url+'/update', status, err.toString());
      }.bind(this)
    });
  },
  getPentestAgent: function() {
    $.ajax({
      url: this.props.pentestAgentGetUrl,
      dataType: 'json',
      success: function(pentestAgent) {
        var pentestAgentUrl = '';
        if (pentestAgent.status == 'success') {
          pentestAgentUrl = pentestAgent.address;
        }
        this.setState({pentestAgentUrl: pentestAgentUrl});

        var startPentest = this.startPentest;
        setTimeout(function(){
          startPentest();
        }, 4000);
        

      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  startDeploy: function() {
    var data = this.state.currData;
    var deployData = {
      app_name: data.applicationName,
      repo_name: data.repository,
      app_port: data.simulationPort,
      custom_files: data.customFiles
    }

    $.ajax({
      url: this.props.appSandboxDeployUrl,
      dataType: 'json',
      type:'POST',
      data: deployData,
      success: function(deployResult) {
        var attackTargetUrl = '';
        if (deployResult.status == 'success' && deployResult.state == 'finished') {
          attackTargetUrl = deployResult.app_server + ":" + deployResult.app_port;
        }
        this.setState({attackTargetUrl: attackTargetUrl});

        this.getPentestAgent();
      
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url+'/update', status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {scanResult: null};
  },
  componentDidMount: function(){
    $('#loadingContainer').fadeOut();
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      success: function(data) {
        this.setState({currData: data});
        this.startDeploy();
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  render: function() {
    console.log(this.state);
    if (this.state.scanResult == null) {
      var result = '';
    } else {
      var result = JSON.stringify(this.state.scanResult);
    }
    return (
      <div className="module-container row">
        <div className="col-lg-12">
          <div id="loadingRunner" className="loading-container-in">
            <span className="helper"></span>
            <img className="loader" width="40" src="/bower_components/loading/loading-spinning-bubbles.svg" alt="Loading..." />
          </div>
          {result}
        </div>
      </div>
    );
  }
});

var Runner = React.createClass({
  render: function() {
    var scenarioId = $('#scenarioId').val();
    var urlData = $('#urlData').val();
    var storeResultUrl = $('#storeResultUrl').val();
    var appSandboxDeployUrl = $('#appSandboxDeployUrl').val();
    var pentestAgentGetUrl = $('#pentestAgentGetUrl').val();
    var pentestAgentScanUrl = $('#pentestAgentScanUrl').val();
    
    return (
      <div>
        <PageTitle 
        iconClassName="glyphicon glyphicon-scale"
        primaryText="Scenario Runner"
        secondaryText="Scenarion runner and reporting" />
      
        <ResultBox 
            scenarioId={scenarioId}
            url={urlData} 
            storeResultUrl={storeResultUrl}
            appSandboxDeployUrl={appSandboxDeployUrl}
            pentestAgentGetUrl={pentestAgentGetUrl}
            pentestAgentScanUrl={pentestAgentScanUrl} />
      </div>
    );
  }
});



var container = ReactDOM.render(<Runner />, document.getElementById('container'));  