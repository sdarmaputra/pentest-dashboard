var path = require('path');
var fs = require('fs');
var request = require('request-json');
var scenario = loadModel('scenario');
var attack = loadModel('attack');

var remoteServer = request.createClient('http://10.151.36.92:5000');
var statusPath = '/scans/';

getW3afTestStatusByUrl = function(simulationUrl, callback) {
  console.log('Getting Current Test Status');
  remoteServer.get(statusPath, function(err, res, body) {
    if (!err && body.items[0]) {
      var data = body.items[0];
      if (data.target_urls[0] == simulationUrl) {
        returnValue = {
          'status': (data.status).toLowerCase(),
          'href': data.href
        }
      } else {
        returnValue = {
          'status': 'unavailable'
        }
      }
      callback(returnValue);
    }
  });
}

getW3afTestResultDetail = function(resultStart, resultLength, resultUrl, resultArray, callback) {
  remoteServer.get(resultUrl, function(err, res, body){
    if (!err) {
      console.log('Fetching test result detail ' + resultStart);
      console.log(resultUrl);
      resultArray[resultStart].severity = body.severity;
      console.log(resultArray[resultStart]);

      resultStart++;
      if (resultStart < resultLength) {
          getW3afTestResultDetail(resultStart, resultLength, resultArray[resultStart].href, resultArray, callback);
      } else {
        console.log('End of loop. Callback!');
        callback(resultArray);  
      }
    }
  });
}

getW3afTestResult = function(scenarioId, clientSocket) {
  var statusList = {
    stopped: 0,
    unavailable: 0,
    running: 1
  }
  console.log('Fetching Current Test Results');
  scenario.findOne({ where: { id: scenarioId } }).then(function(currentScenario) {
      getW3afTestStatusByUrl(currentScenario.simulationUrl, function(data) {
        var result = {};
        console.log(data.status);
        if (statusList[data.status] != 0) {
            remoteServer.get(currentScenario.runningPath+'/kb', function(err, res, body) {
              if (!err) {
                if (body.items instanceof Array) {
                  result = arrayToObject(body.items);
                }
                console.log(result);
                clientSocket.emit('result', result);
                setTimeout(function(){
                  getW3afTestResult(scenarioId, clientSocket);
                }, 1000);
              } else {
                clientSocket.emit('result', result);
                setTimeout(function(){
                  getW3afTestResult(scenarioId, clientSocket);
                }, 1000);
              }
          });
        } else {
          scenario.update({runningStatus: statusList[data.status]}, {where: {id: currentScenario.id}}).then(function(){
            remoteServer.get(currentScenario.runningPath+'/kb', function(err, res, body) {
              if (!err) {
                if (body.items instanceof Array) {
                  result = arrayToObject(body.items);
                }

                var iter = 0;
                var length = Object.keys(result).length;
                console.log('Final result:');
                console.log(result);
                console.log('Size of result: ' + (length-1));

                getW3afTestResultDetail(iter, length, result[iter].href, result, function(resultArray){
                  console.log('Emitting to client...')
                  clientSocket.emit('result', resultArray);    
                });
              }
            });
          });
        }
      });
  });
}

stopCurrentTest = function(scenarioId, callback) {
  console.log('Stopping current test');
  scenario.findOne({ where: { id: scenarioId }, include: [attack] }).then(function(currentScenario) {
    scenario.update({runningStatus: 0}, {where: {id: currentScenario.id}}).then(function(){
      remoteServer.get(currentScenario.runningPath+'/stop', function(err, res, body) {
        callback();
      });
    });
  });
}

deleteCurrentTest = function(scenarioId, callback) {
  console.log('Deleting current test');
  scenario.findOne({ where: { id: scenarioId }, include: [attack] }).then(function(scenario) {
    remoteServer.delete(scenario.runningPath, function(err, res, body) {
      console.log(body);
      callback();
    });
  });
}

startDelayTolerance = function(simulationUrl, runningPathFromDB, runningPathFromAPI, callback) {
  if (runningPathFromDB != runningPathFromAPI) {
    getW3afTestStatusByUrl(simulationUrl, function(data){
      if (data.status == 'stopped') {
        setTimeout(function(){
          startDelayTolerance(simulationUrl, runningPathFromDB, runningPathFromAPI, callback);
        }, 1000);
      } else {
        callback();
      }
    });
  } else {
    callback();
  }
}

startNewTest =  function(scenarioId, callback) {
  console.log('Starting new test');
  scenario.findOne({ where: { id: scenarioId }, include: [attack] }).then(function(currentScenario) {
    var scanProfile = fs.readFileSync(path.join(config.penetration_modules_dirname, 'w3af_profiles', currentScenario.attack.file), 'utf-8');
    var data = {
      'scan_profile': scanProfile,
      'target_urls': [currentScenario.simulationUrl]
    }
    console.log(data);

    remoteServer.post(statusPath, data, function(err, res, body) {
      console.log(body);
      startDelayTolerance(currentScenario.simulationUrl, currentScenario.runningPath, body.href, function(){
        scenario.update({runningPath: body.href, runningStatus: 1}, { where: { id: scenarioId } }).then(function() {
          callback(body);
        });
      });
    });
  });
}
